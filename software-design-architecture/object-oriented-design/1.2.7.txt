When designing a building, architects create sketches to visualize and experiment with various designs.
在设计一栋建筑时，建筑师会绘制草图，以可视化和试验各种设计。

 Sketches are quick to produce and an intuitive way to communicate the design to their client but these sketches are simply not detailed enough for the builders.
草图可以快速生成，并以一种直观的方式将设计传达给客户，但对于构建者来说，这些草图还不够详细。

 When architects communicate with the people who will be constructing the building, they provide detailed blueprints which contain exact measurements of various components.
当建筑师与建造人员沟通时，他们会提供详细的蓝图，其中包含各种组件的精确测量值。

 These extra details allow the builders to construct exactly what the architect envisions.
这些额外的细节允许建造者完全按照建筑师的设想来建造。

 For software, developers use technical diagrams called UML Diagrams to express their designs.
对于软件，开发人员使用称为UML图的技术图来表示他们的设计。

 This is what we will be learning.
这就是我们将要学习的。

 To recap, in previous lessons, we have only been doing conceptual design in the software development process through CRC cards.
回顾一下，在以前的课程中，我们只是通过CRC卡在软件开发过程中进行概念设计。

 In the same way, architects use sketches to visualize and experiment with various designs.
以同样的方式，建筑师使用草图来可视化和试验各种设计。

 CRC cards are only good for prototyping and simulating higher level designs.
CRC卡只适合于原型化和模拟更高级别的设计。

 To guide implementation, you need a technique that would be more like a blueprint.
要指导实现，您需要一种更像蓝图的技术。

 A UML Class Diagram, or just Class Diagram for short, allows you to represent your design in more detail than CRC cards can but it's still visual.
UML类图，或者简称类图，允许您比CRC卡更详细地表示您的设计，但是它仍然是可视化的。

 Class Diagrams are much closer to the implementation and can easily be converted to classes in code.
类图更接近于实现，可以很容易地转换为代码中的类。

 Abstraction, which you may recall, is the idea of simplifying a concept in the problem domain to its essentials within some context.
您可能还记得，抽象是将问题域中的概念简化为在某些上下文中的本质。

 Abstraction allows you to better understand a concept by breaking it down into a simplified description that ignores unimportant details.
通过将概念分解为忽略不重要细节的简化描述，抽象可以让您更好地理解概念。

 You can first apply abstraction at the design level using UML Class Diagrams then eventually convert the design into code.
您可以首先使用UML类图在设计级别应用抽象，然后最终将设计转换为代码。

 In this lesson, you are going to learn how to abstract concepts as a class in a Class Diagram.
在本节课中，您将学习如何在类图中将概念抽象为类。

 You will see that additional details can be represented in a Class Diagram compared to a CRC card.
您将看到，与CRC卡相比，附加的细节可以在类图中表示。

 Don't get me wrong, CRC cards still have their place in prototyping and simulating various designs, but UML Class Diagrams are more suited for communicating the technical design of the software's implementation.
不要误解我的意思，CRC卡仍然在原型和模拟各种设计中占有一席之地，但是UML类图更适合于交流软件实现的技术设计。

 By the end of this lesson, you will be able to convert Class Diagrams into code and even convert code into Class Diagrams with ease.
在本课程结束时，您将能够轻松地将类图转换为代码，甚至将代码转换为类图。

 So let's get started.
我们开始吧。

 Think for a moment on how you would abstract a food item in the context of a grocery store using a CRC card.
请考虑一下如何使用CRC卡在杂货店的上下文中提取食品项。

 You would have a food component with the responsibility of keeping track of its grocery ID, name, manufacturer, expiry date and price.
您将拥有一个食品组件，负责跟踪其食品杂货ID、名称、制造商、有效期和价格。

 It also needs to know if the item is on sale or not.
它还需要知道该商品是否在出售。

 Although CRC cards represent components, if you remember early on, the goal of design is for the components, when they are refined enough, to become functions, classes or collections of other components.
虽然CRC卡代表组件，但如果您还记得早期的情况，那么设计的目标是当组件足够精练时，成为其他组件的函数、类或集合。

 Since we use Java in this course, where an abstraction is formed in a class, we focus on classes.
由于我们在本课程中使用Java，而抽象是在类中形成的，所以我们将重点放在类上。

 So how would the food class look in a Class Diagram?
那么，食品类在类图中是什么样子的呢?

 This is the Class Diagram representation of the food class.
这是food类的类图表示。

 Each class in the Class Diagram is represented by a box.
类图中的每个类都由一个框表示。

 Each box is divided in three sections much like a CRC card.
每个盒子被分成三个部分，很像一张CRC卡。

 The top part is the Class Name.
顶部是类名。

 This would be the same as the class name in your Java class.
这将与Java类中的类名相同。

 The middle part is the Property section.
中间部分是属性部分。

 This would be equivalent to the member variables in your Java class and defines the attributes of the abstraction.
这相当于Java类中的成员变量，并定义了抽象的属性。

 And finally, the bottom part is the operations section which is equivalent to the methods in your Java class and defines the behaviors of the abstraction.
最后，底部是操作部分，它相当于Java类中的方法，并定义了抽象的行为。

 Properties, which are equivalent to Java's member variables, are mainly composed of the variable name and variable type.
属性相当于Java的成员变量，主要由变量名和变量类型组成。

 Variable types, much like in Java, can be classes or primitive types.
与Java非常相似，变量类型可以是类或基本类型。

 Operations, which are equivalent to Java's methods, are mainly composed of the operation name, parameter list and return type.
操作与Java方法等价，主要由操作名、参数列表和返回类型组成。

 For example, a food object could have a method to return if it is on sale or not.
例如，一个food对象可以有一个方法来返回它是否在销售。

 To show this, we write a method called isOnSale.
为了说明这一点，我们编写了一个名为isOnSale的方法。

 This method will return a boolean to represent if it is on sale.
此方法将返回一个布尔值来表示是否正在出售。

 A boolean value is either true or false.
布尔值不是真就是假。

 The isOnSale operation takes no parameter, so we don't include a parameter list.
isOnSale操作没有参数，所以我们不包括参数列表。

 Suppose isOnSale takes a date parameter and returns true if the food item is on sale on the given date, our Class Diagram will now look like this.
假设isOnSale接受一个日期参数并返回true(如果食品在给定日期出售)，那么类图将如下所示。

 Note how the parameter list follows the same format as the Class Diagrams properties.
请注意参数列表如何遵循与类图属性相同的格式。

 Now, if we compare the CRC card to our Class Diagram, you might notice how some of the responsibilities on the card turned into properties in the Class Diagram.
现在，如果我们将CRC卡与类图进行比较，您可能会注意到卡上的一些职责是如何在类图中转换为属性的。

 Some, specifically isOnSale, became an operation.
有些，特别是isOnSale，变成了一个操作。

 You could certainly use CRC cards for abstracting an object such as a grocery food item but there are simply too many ambiguities that prevent a programmer from translating a CRC card to code.
您当然可以使用CRC卡来抽象一个对象，例如食品杂货项，但是有太多的含糊不清阻碍了程序员将CRC卡转换为代码。

 One ambiguity is that a CRC card does not show a separation between properties and operations.
一个不明确的地方是CRC卡没有显示属性和操作之间的分离。

 They are all listed together.
它们都列在一起。

 Now that we have a Class Diagram representation, let's finally implement it in Java.
现在我们有了一个类图表示，让我们最后用Java实现它。

 Class Diagrams are very close to implementation, making the translation to Java very easy.
类图非常接近于实现，使得转换为Java非常容易。

 Class name in Class Diagram turns into a class in Java.
类图中的类名转换为Java中的类。

 Properties in the Class Diagram turn into member variables.
类图中的属性转换为成员变量。

 And finally, Operations turn into methods.
最后，操作变成了方法。

 You will probably notice that everything is public.
你可能会注意到一切都是公开的。

 We will assume that for now.
现在我们假设。

 Later, you will learn about access modifiers of member variables and methods in Java.
稍后，您将了解Java中成员变量和方法的访问修饰符。

 Converting code to Class Diagram is also straightforward.
将代码转换为类图也很简单。

 Consider, for instance, this code.
以这段代码为例。

 To convert this code to a Class Diagram, we identify ClickCounter as the class name since that's what the class is named in the code.
要将此代码转换为类关系图，我们将ClickCounter标识为类名，因为该类在代码中就是这样命名的。

 We, then, set the member variable, count, as a property.
然后，我们将成员变量count设置为属性。

 This property has a type, int.
该属性的类型为int。

 Finally, the methods setClickCount and getClickCount become operations.
最后，方法setClickCount和getClickCount成为操作。

 setClickCount takes a parameter.
setClickCount接受一个参数。

 Therefore, we will include the parameter list specifying the parameter name and its type.
因此，我们将包含指定参数名称及其类型的参数列表。

 getClickCount has a return value.
getClickCount有一个返回值。

 Therefore, we also have to specify the return type.
因此，我们还必须指定返回类型。

 Despite the extra details that the Class Diagram can provide, they still can't replace CRC card for simulating and prototyping different designs.
尽管类图可以提供额外的细节，但是它们仍然不能代替CRC卡来模拟和原型化不同的设计。

 CRC cards are cheap and small.
CRC卡既便宜又小巧。

 It is easy to play with different designs with your team in the physical world and the fact that it is far from code, makes you focus on the problem and not the implementation.
与您的团队在物理世界中进行不同的设计是很容易的，而事实上它离代码很远，这使您关注的是问题而不是实现。

 Class Diagrams, on the other hand, are much closer to code as you have seen.
另一方面，类图更接近您所看到的代码。

 This is great if you want to clearly communicate your technical design to the developers but since you have to specify code-specific things like parameter lists and return values, these are too detailed for conceptual design.
如果您希望向开发人员清楚地传达您的技术设计，这是很好的，但是由于您必须指定特定于代码的东西，比如参数列表和返回值，这些对于概念设计来说太详细了。

 The details would be a distraction and time-consuming to describe when creating your initial designs.
当你开始设计的时候，细节会分散你的注意力，也很费时间。

 You now have learned to represent abstractions at a UML Class Diagram.
您现在已经学会了在UML类图中表示抽象。

 Although CRC cards still have their place for prototyping and simulating designs, the Class Diagram gives you a technical description of what the implementation looks like.
尽管CRC卡在原型化和模拟设计中仍然占有一席之地，但是类图为您提供了实现外观的技术描述。

 But we have only scratched a very tiny surface of UML Class Diagrams.
但是我们只触及了UML类图的一个非常小的表面。

 We will continue to use Class Diagrams in many areas of this specialization.
我们将继续在这个专门化的许多领域中使用类图。

 In the other lessons, we will expand on the Class Diagram by revisiting the other object-oriented design principles.
在其他课程中，我们将通过重新访问其他面向对象的设计原则来扩展类图。

